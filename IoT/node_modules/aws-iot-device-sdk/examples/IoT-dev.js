/*
 * Copyright 2010-2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

//node.js deps

//npm deps

//app deps
const deviceModule = require('..').device;
// const cmdLineProcess = require('./lib/cmdline');

//begin module

function processTest(args) {
   //
   // The device module exports an MQTT instance, which will attempt
   // to connect to the AWS IoT endpoint configured in the arguments.
   // Once connected, it will emit events which our application can
   // handle.
   //

   const device = deviceModule({
      keyPath: '../certs/node-private-key.pem',
      certPath: '../certs/node-cert.pem',
      caPath: '../certs/Amazon_Root_CA_1.pem',
      clientId: 'client-id-1',
      region: undefined,
      baseReconnectTimeMs: 4000,
      keepalive: 300,
      protocol: 'mqtts',
      port: 8883,
      host: 'a2lqo153m4zydi-ats.iot.eu-central-1.amazonaws.com',
      debug: true
   });

/*
../certs/node-private-key.pem
../certs/node-cert.pem
../certs/Amazon_Root_CA_1.pem
client-id-1
undefined
4000
300
mqtts
8883
a2lqo153m4zydi-ats.iot.eu-central-1.amazonaws.com
false
*/
/*
   console.log(args.privateKey);
   console.log(args.clientCert);
   console.log(args.caCert);
   console.log(args.clientId);
   console.log(args.region);
   console.log(args.baseReconnectTimeMs);
   console.log(args.keepAlive);
   console.log(args.Protocol);
   console.log(args.Port);
   console.log(args.Host);
   console.log(args.Debug);
*/
   var timeout;
   var count = 0;
   const minimumDelay = 250;
   /*
   if (args.testMode === 1) {
      device.subscribe('topic_1');
   } else {
      device.subscribe('topic_2');
   }
   if ((Math.max(args.delay, minimumDelay)) !== args.delay) {
      console.log('substituting ' + minimumDelay + 'ms delay for ' + args.delay + 'ms...');
   }
   */
   timeout = setInterval(function() {
      count++;
      device.publish('my/dev-topic', JSON.stringify({
            mode1Process: count
         }));
   }, minimumDelay); 

   //
   // Do a simple publish/subscribe demo based on the test-mode passed
   // in the command line arguments.  If test-mode is 1, subscribe to
   // 'topic_1' and publish to 'topic_2'; otherwise vice versa.  Publish
   // a message every four seconds.
   //
   
   device.on('connect', function() {
         console.log('connect');
      });
   device.on('close', function() {
         console.log('close');
      });
   device.on('reconnect', function() {
         console.log('reconnect');
      });
   device.on('offline', function() {
         console.log('offline');
      });
   device.on('error', function(error) {
         console.log('error', error);
      });
   device.on('message', function(topic, payload) {
         console.log('message', topic, payload.toString());
      });

}

// module.exports = cmdLineProcess;

processTest()
